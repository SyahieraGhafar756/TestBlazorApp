@page "/"
@inject IJSRuntime JS
@inject TestBlazorApp.Application.TaskService TaskService

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="css/task.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="js/task.js"></script>
<div class="task-container">
<br />
<h3 class="text-center mb-4">Task Manager 2025</h3>
<br />
<div class="task-inputs mb-4">
    <input @bind="title" placeholder="Title" class="form-control mb-2" />
    <input @bind="description" placeholder="Description" class="form-control mb-2" />
    <button class="btn btn-primary w-100" @onclick="AddTask">Add Task</button>
</div>
<br />
<ul class="task-list">
    @foreach (var task in tasks)
    {
        <li class="task-item @(task.IsCompleted ? "completed" : "")">
            <div class="task-left">
                <input type="checkbox" checked="@task.IsCompleted" @onchange="() => ToggleComplete(task)" />
                <div class="task-text">
                    <strong>@task.Title</strong>
                    <p>@task.Description</p>
                </div>
            </div>
            @*<button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task.Id)">Delete</button> *@
            @* <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(task.Id)">Delete</button> *@
            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(task.Id, task.Title)">Delete</button>
        </li>
    }
</ul>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3 shadow">
            <div class="modal-header bg-danger text-white text-center">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                Are you sure you want to delete task: <strong>@taskTitleToDelete</strong>?
            </div>
            <div class="modal-footer justify-content-center">
                <button class="btn btn-danger" @onclick="DeleteTask">Yes</button>
                <button class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string title = "";
    private string description = "";
    private List<TestBlazorApp.Domain.Entities.TaskItem> tasks = new();

    protected override async Task OnInitializedAsync() => tasks = await TaskService.GetTasksAsync();

    private async Task AddTask()
    {
        await TaskService.AddTaskAsync(title, description);
        tasks = await TaskService.GetTasksAsync();
        title = description = "";
    }

    private async Task ToggleComplete(TestBlazorApp.Domain.Entities.TaskItem task)
    {
        await TaskService.ToggleCompleteAsync(task);
        tasks = await TaskService.GetTasksAsync();
    }

    private int taskIdToDelete;
    private string taskTitleToDelete = string.Empty;

    private async Task ConfirmDelete(int taskId, string title)
    {
        taskIdToDelete = taskId;
        taskTitleToDelete = title;
        await JS.InvokeVoidAsync("bootstrapInterop.showModal", "#deleteModal");
    }

    private async Task DeleteTask()
    {
        await TaskService.DeleteTaskAsync(taskIdToDelete);
        tasks = await TaskService.GetTasksAsync();
        await JS.InvokeVoidAsync("bootstrapInterop.hideModal", "#deleteModal");
    }

    // private async Task ConfirmDelete(int taskId)
    // {
    //     bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
    //     if (confirmed)
    //     {
    //         await DeleteTask(taskId);
    //     }
    // }

    // private async Task DeleteTask(int id)
    // {
    //     await TaskService.DeleteTaskAsync(id);
    //     tasks = await TaskService.GetTasksAsync();
    //     await JS.InvokeVoidAsync("bootstrapInterop.hideModal", "#deleteModal");
    //     // await TaskService.DeleteTaskAsync(id);
    //     // tasks = await TaskService.GetTasksAsync();
    // }

}